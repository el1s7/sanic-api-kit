[uwsgi]
chdir = /home/apps/myapp/src/
wsgi-file = wsgi.py
stats = 127.0.0.1:9191
socket = 127.0.0.1:5000
uid = ubuntu
gid = ubuntu


strict = true
master = true
vacuum = true                        ; Delete sockets during shutdown
enable-threads = true
single-interpreter = true
die-on-term = true                   ; Shutdown when receiving SIGTERM (default is respawn)
need-app = true

disable-logging = true               ; Disable built-in logging 
; log-4xx = true                     ; but log 4xx's anyway
; log-5xx = true                     ; and 5xx's

harakiri = 60                        ; forcefully kill workers after 60 seconds

max-requests = 1000                  ; Restart workers after this many requests
max-worker-lifetime = 3600           ; Restart workers after this many seconds
reload-on-rss = 512                  ; Restart workers after this much resident memory
worker-reload-mercy = 60             ; How long to wait before forcefully killing workers

cheaper-algo = busyness
processes = %k                       ; Maximum number of workers allowed
threads=1
;cheaper = 2                          ; Minimum number of workers allowed
;cheaper-initial = 2                  ; Workers created at startup
;cheaper-overload = 30                ; Length of a cycle in seconds
;cheaper-step = 1                     ; How many workers to spawn at a time

;cheaper-busyness-multiplier = 20     ; How many cycles to wait before killing workers
;cheaper-busyness-min = 25            ; Below this threshold, kill workers (if stable for multiplier cycles)
;cheaper-busyness-max = 50            ; Above this threshold, spawn new workers
;cheaper-busyness-backlog-alert = 16  ; Spawn emergency workers if more than this many requests are waiting in the queue
;cheaper-busyness-backlog-step = 1    ; How many emergency workers to create if there are too many requests in the queue

pidfile=/home/apps/myapp/myapp.pid
;daemonize=/var/log/uwsgi/%n.log

;daemonize = /var/log/nginx/uwsgi.log
;daemonize = /dev/null